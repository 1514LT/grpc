// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: LT.proto
#ifndef GRPC_LT_2eproto__INCLUDED
#define GRPC_LT_2eproto__INCLUDED

#include "LT.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace lt {

// 定义服务
class LTService final {
 public:
  static constexpr char const* service_full_name() {
    return "lt.LTService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 定义一个方法
    virtual ::grpc::Status ProcessRequest(::grpc::ClientContext* context, const ::lt::LTRequest& request, ::lt::LTResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lt::LTResponse>> AsyncProcessRequest(::grpc::ClientContext* context, const ::lt::LTRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lt::LTResponse>>(AsyncProcessRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lt::LTResponse>> PrepareAsyncProcessRequest(::grpc::ClientContext* context, const ::lt::LTRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lt::LTResponse>>(PrepareAsyncProcessRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status ProcessFileRequest(::grpc::ClientContext* context, const ::lt::FileRequest& request, ::lt::FileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lt::FileResponse>> AsyncProcessFileRequest(::grpc::ClientContext* context, const ::lt::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lt::FileResponse>>(AsyncProcessFileRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lt::FileResponse>> PrepareAsyncProcessFileRequest(::grpc::ClientContext* context, const ::lt::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lt::FileResponse>>(PrepareAsyncProcessFileRequestRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 定义一个方法
      virtual void ProcessRequest(::grpc::ClientContext* context, const ::lt::LTRequest* request, ::lt::LTResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ProcessRequest(::grpc::ClientContext* context, const ::lt::LTRequest* request, ::lt::LTResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ProcessFileRequest(::grpc::ClientContext* context, const ::lt::FileRequest* request, ::lt::FileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ProcessFileRequest(::grpc::ClientContext* context, const ::lt::FileRequest* request, ::lt::FileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lt::LTResponse>* AsyncProcessRequestRaw(::grpc::ClientContext* context, const ::lt::LTRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lt::LTResponse>* PrepareAsyncProcessRequestRaw(::grpc::ClientContext* context, const ::lt::LTRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lt::FileResponse>* AsyncProcessFileRequestRaw(::grpc::ClientContext* context, const ::lt::FileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lt::FileResponse>* PrepareAsyncProcessFileRequestRaw(::grpc::ClientContext* context, const ::lt::FileRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ProcessRequest(::grpc::ClientContext* context, const ::lt::LTRequest& request, ::lt::LTResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lt::LTResponse>> AsyncProcessRequest(::grpc::ClientContext* context, const ::lt::LTRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lt::LTResponse>>(AsyncProcessRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lt::LTResponse>> PrepareAsyncProcessRequest(::grpc::ClientContext* context, const ::lt::LTRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lt::LTResponse>>(PrepareAsyncProcessRequestRaw(context, request, cq));
    }
    ::grpc::Status ProcessFileRequest(::grpc::ClientContext* context, const ::lt::FileRequest& request, ::lt::FileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lt::FileResponse>> AsyncProcessFileRequest(::grpc::ClientContext* context, const ::lt::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lt::FileResponse>>(AsyncProcessFileRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lt::FileResponse>> PrepareAsyncProcessFileRequest(::grpc::ClientContext* context, const ::lt::FileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lt::FileResponse>>(PrepareAsyncProcessFileRequestRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ProcessRequest(::grpc::ClientContext* context, const ::lt::LTRequest* request, ::lt::LTResponse* response, std::function<void(::grpc::Status)>) override;
      void ProcessRequest(::grpc::ClientContext* context, const ::lt::LTRequest* request, ::lt::LTResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ProcessFileRequest(::grpc::ClientContext* context, const ::lt::FileRequest* request, ::lt::FileResponse* response, std::function<void(::grpc::Status)>) override;
      void ProcessFileRequest(::grpc::ClientContext* context, const ::lt::FileRequest* request, ::lt::FileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::lt::LTResponse>* AsyncProcessRequestRaw(::grpc::ClientContext* context, const ::lt::LTRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lt::LTResponse>* PrepareAsyncProcessRequestRaw(::grpc::ClientContext* context, const ::lt::LTRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lt::FileResponse>* AsyncProcessFileRequestRaw(::grpc::ClientContext* context, const ::lt::FileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lt::FileResponse>* PrepareAsyncProcessFileRequestRaw(::grpc::ClientContext* context, const ::lt::FileRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ProcessRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_ProcessFileRequest_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 定义一个方法
    virtual ::grpc::Status ProcessRequest(::grpc::ServerContext* context, const ::lt::LTRequest* request, ::lt::LTResponse* response);
    virtual ::grpc::Status ProcessFileRequest(::grpc::ServerContext* context, const ::lt::FileRequest* request, ::lt::FileResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ProcessRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ProcessRequest() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ProcessRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessRequest(::grpc::ServerContext* /*context*/, const ::lt::LTRequest* /*request*/, ::lt::LTResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessRequest(::grpc::ServerContext* context, ::lt::LTRequest* request, ::grpc::ServerAsyncResponseWriter< ::lt::LTResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ProcessFileRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ProcessFileRequest() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ProcessFileRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessFileRequest(::grpc::ServerContext* /*context*/, const ::lt::FileRequest* /*request*/, ::lt::FileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessFileRequest(::grpc::ServerContext* context, ::lt::FileRequest* request, ::grpc::ServerAsyncResponseWriter< ::lt::FileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ProcessRequest<WithAsyncMethod_ProcessFileRequest<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ProcessRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ProcessRequest() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::lt::LTRequest, ::lt::LTResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::lt::LTRequest* request, ::lt::LTResponse* response) { return this->ProcessRequest(context, request, response); }));}
    void SetMessageAllocatorFor_ProcessRequest(
        ::grpc::MessageAllocator< ::lt::LTRequest, ::lt::LTResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::lt::LTRequest, ::lt::LTResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ProcessRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessRequest(::grpc::ServerContext* /*context*/, const ::lt::LTRequest* /*request*/, ::lt::LTResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ProcessRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::lt::LTRequest* /*request*/, ::lt::LTResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ProcessFileRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ProcessFileRequest() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::lt::FileRequest, ::lt::FileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::lt::FileRequest* request, ::lt::FileResponse* response) { return this->ProcessFileRequest(context, request, response); }));}
    void SetMessageAllocatorFor_ProcessFileRequest(
        ::grpc::MessageAllocator< ::lt::FileRequest, ::lt::FileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::lt::FileRequest, ::lt::FileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ProcessFileRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessFileRequest(::grpc::ServerContext* /*context*/, const ::lt::FileRequest* /*request*/, ::lt::FileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ProcessFileRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::lt::FileRequest* /*request*/, ::lt::FileResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ProcessRequest<WithCallbackMethod_ProcessFileRequest<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ProcessRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ProcessRequest() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ProcessRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessRequest(::grpc::ServerContext* /*context*/, const ::lt::LTRequest* /*request*/, ::lt::LTResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ProcessFileRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ProcessFileRequest() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ProcessFileRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessFileRequest(::grpc::ServerContext* /*context*/, const ::lt::FileRequest* /*request*/, ::lt::FileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ProcessRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ProcessRequest() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ProcessRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessRequest(::grpc::ServerContext* /*context*/, const ::lt::LTRequest* /*request*/, ::lt::LTResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ProcessFileRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ProcessFileRequest() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ProcessFileRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessFileRequest(::grpc::ServerContext* /*context*/, const ::lt::FileRequest* /*request*/, ::lt::FileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessFileRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ProcessRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ProcessRequest() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ProcessRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_ProcessRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessRequest(::grpc::ServerContext* /*context*/, const ::lt::LTRequest* /*request*/, ::lt::LTResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ProcessRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ProcessFileRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ProcessFileRequest() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ProcessFileRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_ProcessFileRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessFileRequest(::grpc::ServerContext* /*context*/, const ::lt::FileRequest* /*request*/, ::lt::FileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ProcessFileRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ProcessRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ProcessRequest() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::lt::LTRequest, ::lt::LTResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::lt::LTRequest, ::lt::LTResponse>* streamer) {
                       return this->StreamedProcessRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ProcessRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ProcessRequest(::grpc::ServerContext* /*context*/, const ::lt::LTRequest* /*request*/, ::lt::LTResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedProcessRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lt::LTRequest,::lt::LTResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ProcessFileRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ProcessFileRequest() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::lt::FileRequest, ::lt::FileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::lt::FileRequest, ::lt::FileResponse>* streamer) {
                       return this->StreamedProcessFileRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ProcessFileRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ProcessFileRequest(::grpc::ServerContext* /*context*/, const ::lt::FileRequest* /*request*/, ::lt::FileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedProcessFileRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lt::FileRequest,::lt::FileResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ProcessRequest<WithStreamedUnaryMethod_ProcessFileRequest<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ProcessRequest<WithStreamedUnaryMethod_ProcessFileRequest<Service > > StreamedService;
};

}  // namespace lt


#endif  // GRPC_LT_2eproto__INCLUDED
